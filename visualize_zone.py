import json
import socket
import threading
from queue import Queue
import numpy as np
import matplotlib.pyplot as plt
from hokuyolx import HokuyoLX
from matplotlib.path import Path
import time
from pathlib import Path as SysPath


def load_zone_points():
    while True:
        choice = input(
            "–í–∏–±–µ—Ä–∏ –∑–æ–Ω—É: 0 ‚Äî –∑ —Ñ–∞–π–ª—É zone_config.json, 1 ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∑–æ–Ω–∞ 1√ó1 –º: "
        ).strip()
        if choice in {"0", "1"}:
            break
        print("–í–≤–µ–¥–∏ 0 –∞–±–æ 1.")

    if choice == "0":
        config_path = SysPath("zone_config.json")
        if not config_path.exists():
            raise FileNotFoundError("zone_config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π setup_zone.py.")
        with config_path.open("r", encoding="utf-8") as f:
            points = json.load(f)["zone"]
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–æ–Ω—É –∑ 4 —Ç–æ—á–æ–∫: {points}")
        return points, False

    custom_points = [(-0.5, 0.0), (0.5, 0.0), (0.5, 1.0), (-0.5, 1.0)]
    print(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∑–æ–Ω—É 1√ó1 –º: {custom_points}")
    return custom_points, True


class TouchEventServer:
    def __init__(self, host: str, port: int):
        self.host = host
        self.port = port
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server_socket.bind((self.host, self.port))
        self.server_socket.listen(1)
        self.server_socket.settimeout(1.0)
        self.client = None
        self.client_lock = threading.Lock()
        self.queue: Queue = Queue()
        self.running = True
        self.accept_thread = threading.Thread(target=self._accept_loop, daemon=True)
        self.sender_thread = threading.Thread(target=self._sender_loop, daemon=True)
        self.accept_thread.start()
        self.sender_thread.start()
        print(f"üì° TouchEventServer listening on {self.host}:{self.port}")

    def _accept_loop(self):
        while self.running:
            try:
                conn, addr = self.server_socket.accept()
            except socket.timeout:
                continue
            except OSError:
                break
            with self.client_lock:
                if self.client:
                    try:
                        self.client.close()
                    except OSError:
                        pass
                self.client = conn
                self.client.settimeout(2.0)
            print(f"üîå Client connected from {addr}")

    def _sender_loop(self):
        while self.running:
            event = self.queue.get()
            if event is None:
                break
            payload = json.dumps(event) + "\n"
            with self.client_lock:
                client = self.client
            if not client:
                continue
            try:
                client.sendall(payload.encode("utf-8"))
            except OSError:
                print("‚ö†Ô∏è Client disconnected")
                with self.client_lock:
                    try:
                        if self.client:
                            self.client.close()
                    except OSError:
                        pass
                    self.client = None

    def send_event(self, event: dict):
        if self.running:
            self.queue.put(event)

    def shutdown(self):
        self.running = False
        try:
            self.server_socket.close()
        except OSError:
            pass
        self.queue.put(None)
        with self.client_lock:
            if self.client:
                try:
                    self.client.close()
                except OSError:
                    pass
                self.client = None
        print("üõë TouchEventServer stopped")


zone_points, is_custom_zone = load_zone_points()
zone_path = Path(zone_points)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—è
TOUCH_THRESHOLD = 0.15   # –º ‚Äî –∑–º—ñ–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–ª—è "–¥–æ—Ç–∏–∫—É"
MIN_POINTS = 5           # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫
SMOOTHING = 0.3          # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–Ω—É
ANGLE_MIN = -90
ANGLE_MAX = 90
ACTIVATION_FRAMES = 2    # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—è–≤–∏
DEACTIVATION_FRAMES = 3  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
SERVER_HOST = "0.0.0.0"
SERVER_PORT = 9100

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ª—ñ–¥–∞—Ä—É
laser = HokuyoLX(addr=('192.168.0.10', 10940))
event_server = TouchEventServer(SERVER_HOST, SERVER_PORT)

# --- –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ–æ–Ω
print("‚è≥ –ö–∞–ª—ñ–±—Ä—É—é —Ñ–æ–Ω...")
time.sleep(1)
_, base_dist = laser.get_dist()
base_dist = np.array(base_dist, dtype=float) / 1000.0
angle_deg_full = np.linspace(-135, 135, len(base_dist))
sector_mask = (angle_deg_full >= ANGLE_MIN) & (angle_deg_full <= ANGLE_MAX)
angles = np.deg2rad(angle_deg_full[sector_mask])
base_dist = base_dist[sector_mask]
if np.isnan(base_dist).any():
    valid = base_dist[~np.isnan(base_dist)]
    fallback = valid.mean() if valid.size else 1.0
    base_dist = np.where(np.isnan(base_dist), fallback, base_dist)
print("‚úÖ –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# --- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
plt.ion()
fig, ax = plt.subplots(figsize=(6, 6))
sc = ax.scatter([], [], s=5, c='cyan')
ax.scatter(0, 0, c='orange', marker='x', s=80)
ax.text(0, 0, " –õ—ñ–¥–∞—Ä", color='orange', fontsize=9, va='bottom')

# –º–µ–∂—ñ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ –¥–∞–Ω–∏–º–∏ –ø–æ–ª—ñ–≥–æ–Ω–∞
zone_forward = [pt[0] for pt in zone_points]
zone_lateral = [pt[1] for pt in zone_points]
margin_forward = 0.0 if is_custom_zone else 0.5
margin_lateral = 0.0 if is_custom_zone else 0.5
x_min, x_max = min(zone_lateral) - margin_lateral, max(zone_lateral) + margin_lateral
y_min, y_max = min(zone_forward) - margin_forward, max(zone_forward) + margin_forward
ax.set_xlim(x_min, x_max)
ax.set_ylim(y_min, y_max)
ax.set_xlabel('Y (–º) ‚Äî –ª—ñ–≤–æ/–ø—Ä–∞–≤–æ')
ax.set_ylabel('X (–º) ‚Äî –≤–ø–µ—Ä–µ–¥')
ax.set_title('Hokuyo ‚Äî —Ç—Ä–µ–∫—ñ–Ω–≥ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∑–æ–Ω—ñ')
x_left, x_right = ax.get_xlim()
y_bottom, y_top = ax.get_ylim()
ax.text(x_left, y_bottom, " –õ—ñ–≤–æ", color='gray', ha='left', va='bottom')
ax.text(x_right, y_bottom, " –ü—Ä–∞–≤–æ", color='gray', ha='right', va='bottom')
ax.text((x_left + x_right) / 2.0, y_top, " –í–ø–µ—Ä–µ–¥", color='gray', ha='center', va='top')
ax.text((x_left + x_right) / 2.0, y_bottom, " –ë–ª–∏–∂—á–µ", color='gray', ha='center', va='bottom')

# –º–∞–ª—é—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω –∑–æ–Ω–∏
verts = zone_points + [zone_points[0]]
plot_x = [pt[1] for pt in verts]
plot_y = [pt[0] for pt in verts]
ax.plot(plot_x, plot_y, c='red', lw=2)

# --- –°—Ç–∞–Ω –ø–æ–¥—ñ—ó
is_touch_active = False
last_touch_coords = None
touch_frames = 0
missing_frames = 0

# --- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
while plt.fignum_exists(fig.number):
    timestamp, dist_mm = laser.get_dist()
    dist_full = np.array(dist_mm, dtype=float) / 1000.0
    dist_m = dist_full[sector_mask]
    dist_m = np.where(~np.isfinite(dist_m), base_dist, dist_m)

    x = dist_m * np.cos(angles)
    y = dist_m * np.sin(angles)

    # —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Ç–æ—á–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–æ–ª—ñ–≥–æ–Ω–∞
    inside_mask = zone_path.contains_points(np.c_[x, y])
    x_in, y_in = x[inside_mask], y[inside_mask]

    # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    sc.set_offsets(np.c_[y_in, x_in])
    fig.canvas.draw()
    fig.canvas.flush_events()

    # –≤–∏—è–≤–ª–µ–Ω–Ω—è –¥–æ—Ç–∏–∫—ñ–≤
    diff = base_dist - dist_m
    touch_mask = (diff > TOUCH_THRESHOLD)
    touch_points = np.sum(touch_mask & inside_mask)

    if touch_points > MIN_POINTS:
        idx = np.where(touch_mask & inside_mask)[0]
        x_touch = np.mean(x[idx])
        y_touch = np.mean(y[idx])
        last_touch_coords = (x_touch, y_touch)
        touch_frames += 1
        missing_frames = 0
        if not is_touch_active and touch_frames >= ACTIVATION_FRAMES:
            is_touch_active = True
            print(f"üëâ Touch started at ({x_touch:.2f}, {y_touch:.2f}) –º ‚Äî {touch_points} —Ç–æ—á–æ–∫")
            event_server.send_event(
                {
                    "event": "touch_start",
                    "x": float(x_touch),
                    "y": float(y_touch),
                    "points": int(touch_points),
                    "timestamp": time.time(),
                }
            )
    else:
        touch_frames = 0
        missing_frames += 1
        if is_touch_active and missing_frames >= DEACTIVATION_FRAMES:
            is_touch_active = False
            if last_touch_coords:
                print(f"üëã Touch ended near ({last_touch_coords[0]:.2f}, {last_touch_coords[1]:.2f}) –º")
            else:
                print("üëã Touch ended")
            event_server.send_event(
                {
                    "event": "touch_end",
                    "x": float(last_touch_coords[0]) if last_touch_coords else None,
                    "y": float(last_touch_coords[1]) if last_touch_coords else None,
                    "timestamp": time.time(),
                }
            )
            last_touch_coords = None
            missing_frames = 0

    # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–Ω—É
    base_dist = (1 - SMOOTHING) * base_dist + SMOOTHING * dist_m
    time.sleep(0.05)

event_server.shutdown()
