import json
import numpy as np
import matplotlib.pyplot as plt
from hokuyolx import HokuyoLX
from matplotlib.path import Path
import time

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–Ω–∏ –∑ —Ñ–∞–π–ª—É
with open("zone_config.json", "r", encoding="utf-8") as f:
    zone_points = json.load(f)["zone"]
zone_path = Path(zone_points)
print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–æ–Ω—É –∑ 4 —Ç–æ—á–æ–∫: {zone_points}")

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ª—ñ–¥–∞—Ä—É
laser = HokuyoLX(addr=('192.168.0.10', 10940))

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—è
TOUCH_THRESHOLD = 0.15   # –º ‚Äî –∑–º—ñ–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–ª—è "–¥–æ—Ç–∏–∫—É"
MIN_POINTS = 5           # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫
SMOOTHING = 0.3          # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–Ω—É

# --- –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ–æ–Ω
print("‚è≥ –ö–∞–ª—ñ–±—Ä—É—é —Ñ–æ–Ω...")
time.sleep(1)
_, base_dist = laser.get_dist()
base_dist = np.array(base_dist, dtype=float) / 1000.0
print("‚úÖ –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# --- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
plt.ion()
fig, ax = plt.subplots(figsize=(6, 6))
sc = ax.scatter([], [], s=5, c='cyan')

# –º–µ–∂—ñ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ –¥–∞–Ω–∏–º–∏ –ø–æ–ª—ñ–≥–æ–Ω–∞
zone_x, zone_y = zip(*zone_points)
ax.set_xlim(min(zone_x) - 0.5, max(zone_x) + 0.5)
ax.set_ylim(min(zone_y) - 0.5, max(zone_y) + 0.5)
ax.set_xlabel('X (–º)')
ax.set_ylabel('Y (–º)')
ax.set_title('Hokuyo ‚Äî —Ç—Ä–µ–∫—ñ–Ω–≥ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∑–æ–Ω—ñ')

# –º–∞–ª—é—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω –∑–æ–Ω–∏
verts = zone_points + [zone_points[0]]
ax.plot(*zip(*verts), c='red', lw=2)

# --- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
while plt.fignum_exists(fig.number):
    timestamp, dist_mm = laser.get_dist()
    dist_m = np.array(dist_mm, dtype=float) / 1000.0
    dist_m = np.nan_to_num(dist_m, nan=base_dist)

    angles = np.linspace(-135, 135, len(dist_m)) * np.pi / 180.0
    x = dist_m * np.cos(angles)
    y = dist_m * np.sin(angles)

    # —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ —Ç–æ—á–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–æ–ª—ñ–≥–æ–Ω–∞
    inside_mask = zone_path.contains_points(np.c_[x, y])
    x_in, y_in = x[inside_mask], y[inside_mask]

    # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    sc.set_offsets(np.c_[x_in, y_in])
    fig.canvas.draw()
    fig.canvas.flush_events()

    # –≤–∏—è–≤–ª–µ–Ω–Ω—è –¥–æ—Ç–∏–∫—ñ–≤
    diff = base_dist - dist_m
    touch_mask = (diff > TOUCH_THRESHOLD)
    touch_points = np.sum(touch_mask & inside_mask)

    if touch_points > MIN_POINTS:
        idx = np.where(touch_mask & inside_mask)[0]
        x_touch = np.mean(x[idx])
        y_touch = np.mean(y[idx])
        print(f"üëâ Touch detected at ({x_touch:.2f}, {y_touch:.2f}) –º ‚Äî {touch_points} —Ç–æ—á–æ–∫")

    # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–Ω—É
    base_dist = (1 - SMOOTHING) * base_dist + SMOOTHING * dist_m
    time.sleep(0.05)