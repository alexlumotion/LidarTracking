import time

from hokuyolx import HokuyoLX


LASER_MAX_RETRIES = 3
LASER_RECONNECT_DELAY = 0.5

laser = None


def create_laser():
    return HokuyoLX(addr=('192.168.0.10', 10940))


def reset_laser():
    global laser
    if laser is None:
        return
    closer = getattr(laser, "close", None)
    if callable(closer):
        try:
            closer()
        except Exception as exc:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ Hokuyo: {exc}")
    laser = None


def fetch_scan(max_retries: int = LASER_MAX_RETRIES):
    global laser
    last_exc = None
    for attempt in range(1, max_retries + 1):
        if laser is None:
            try:
                laser = create_laser()
                print("üîÑ Hokuyo –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            except Exception as exc:
                last_exc = exc
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ Hokuyo ({attempt}/{max_retries}): {exc}")
                time.sleep(LASER_RECONNECT_DELAY * attempt)
                continue
        try:
            return laser.get_dist()
        except Exception as exc:
            last_exc = exc
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Hokuyo ({attempt}/{max_retries}): {exc}")
            reset_laser()
            time.sleep(LASER_RECONNECT_DELAY * attempt)
    raise RuntimeError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Hokuyo: {last_exc}")

